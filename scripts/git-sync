#!/usr/bin/env bash
#
# git-sync [<branch>]
# Sync your feature/* or bugfix/* with develop, # or hotfix/* with main
#

set -euo pipefail

# ─── Helpers ────────────────────────────────────────────────────────────────

error() {
  printf 'Error: %s\n' "$1" >&2
  exit 1
}

usage() {
  cat <<EOF
Usage: $(basename "$0") [<branch>]
  If no <branch> given, uses the current branch.
  Branch must start with feature/, bugfix/ or hotfix/.
EOF
  exit 1
}

# ─── Core Steps ─────────────────────────────────────────────────────────────

get_branch_name() {
  if [ $# -gt 1 ]; then
    usage
  elif [ $# -eq 1 ]; then
    echo "$1"
  else
    git rev-parse --abbrev-ref HEAD 2>/dev/null \
      || error "Not a git repo or cannot detect current branch."
  fi
}

validate_prefix() {
  local full=$1
  if [[ ! "$full" =~ ^(feature|bugfix|hotfix)/.+$ ]]; then
    error "Branch name must start with feature/, bugfix/ or hotfix/."
  fi
}

detect_base() {
  local full=$1
  local prefix=${full%%/*}
  [[ "$prefix" == hotfix ]] && echo main || echo develop
}

fetch_and_prune() {
  echo "→ Fetching remote and pruning…"
  git fetch --prune origin
}

check_remote_branch() {
  local full=$1
  if ! git ls-remote --exit-code --heads origin "$full" &>/dev/null; then
    cat <<EOF

⚠️  Remote branch 'origin/${full}' not found.

Possible reasons:
  • You forgot to push your branch.
  • It was deleted remotely.

Fixes:
  1. Push it:
       git push -u origin "${full}"
  2. If deleted upstream, review or rename:
       git log "${full}"
       git branch -m "${full}" new-name

EOF
    exit 0
  fi
}

stash_changes() {
  echo "→ Stashing uncommitted changes…"
  git stash push --keep-index --include-untracked
}

pop_stash() {
  echo "→ Restoring stash…"
  git stash pop || echo "⚠️  Nothing to pop."
}

sync_branch() {
  local base=$1
  echo "→ Syncing base '${base}'…"
  git checkout "$base"
  git pull --ff-only origin "$base"
}

merge_base_into() {
  local base=$1 full=$2
  echo "→ Checking out '${full}'…"
  git checkout "$full"
  echo "→ Merging '${base}' → '${full}'…"
  git merge --no-ff "$base"
}

# ─── Main Orchestration ────────────────────────────────────────────────────

main() {
  local branch
  branch=$(get_branch_name "$@")
  validate_prefix  "$branch"

  local base
  base=$(detect_base "$branch")

  fetch_and_prune
  check_remote_branch "$branch"

  stash_changes
  sync_branch     "$base"
  merge_base_into "$base" "$branch"
  pop_stash

  echo "✔ Synchronized '${branch}' with '${base}'"
}

main "$@"
