#!/usr/bin/env bash
#
# git-sync [<branch>]
# Sync your feature/* or bugfix/* with develop,
# or hotfix/* with main.
#

set -euo pipefail

error() {
  printf 'Error: %s\n' "$1" >&2
  exit 1
}

usage() {
  cat <<EOF
Usage: $(basename "$0") [<branch>]
  If no <branch> given, uses the current branch.
  Branch must start with feature/, bugfix/ or hotfix/.
EOF
  exit 1
}

get_branch_name() {
  if [ $# -gt 1 ]; then
    usage
  elif [ $# -eq 1 ]; then
    echo "$1"
  else
    git rev-parse --abbrev-ref HEAD 2>/dev/null \
      || error "Not a git repo or cannot detect current branch."
  fi
}

validate_prefix() {
  local full=$1
  if [[ ! "$full" =~ ^(feature|bugfix|hotfix)/.+$ ]]; then
    error "Branch name must start with feature/, bugfix/ or hotfix/."
  fi
}

detect_base() {
  local full=$1
  [[ "${full%%/*}" == hotfix ]] && echo main || echo develop
}

fetch_and_prune() {
  echo "→ [STEP 1/6] Fetch remote and prune"
  git fetch --prune origin
}

check_or_create_remote() {
  echo "→ [STEP 2/6] Check remote branch"
  local full=$1
  if git show-ref --verify --quiet "refs/remotes/origin/${full}"; then
    return 0
  fi

  echo
  echo "⚠️  Remote branch 'origin/${full}' not found."
  echo "   Do you want to push and set upstream for '${full}' now? [y/N]"
  read -r answer
  if [[ "$answer" =~ ^[Yy]$ ]]; then
    echo "→ Pushing '${full}' to origin and setting upstream"
    git push -u origin "${full}" \
      || error "Failed to push and set upstream."
  else
    echo "→ Skipping sync; you can push later with:"
    echo "     git push -u origin ${full}"
    exit 0
  fi
}

do_stash() {
  local MSG="git-sync auto-stash on $(date '+%Y-%m-%d %H:%M:%S')"
  echo "→ [STEP 3/6] Stash uncommitted changes: ${MSG}"
  git stash push --keep-index --include-untracked -m "${MSG}"
}

sync_branch() {
  echo "→ [STEP 4/6] Sync base '$(detect_base "$branch")'"
  local base=$1
  git checkout "$base"
  git pull --ff-only origin "$base"
}

merge_base_into() {
  echo "→ [STEP 5/6] Merge into '${branch}'"
  local base=$1 full=$2
  git checkout "$full"
  git merge --no-ff "$base"
}

do_pop() {
  echo "→ [STEP 6/6] Restore stash"
  git stash pop || echo "⚠️  Nothing to pop."
}

main() {
  echo "→ Starting sync for branch '${branch}'"
  branch=$(get_branch_name "$@")

  fetch_and_prune

  check_or_create_remote "$branch"

  do_stash

  sync_branch "$(detect_base "$branch")"

  merge_base_into "$(detect_base "$branch")" "$branch"

  do_pop

  echo "✔ Branch '${branch}' is now synchronized with '$(detect_base "$branch")'"
}

main "$@"
