#!/usr/bin/env bash
#
# git-sync [--push]
# Sync your feature/* or bugfix/* with develop,
# or hotfix/* with main, using git rebase.
# Optionally push/create remote branch after.
#
set -euo pipefail

error() { printf 'Error: %s\n' "$1" >&2; exit 1; }
usage() {
  cat <<EOF
Usage: $(basename "$0") [--push]
  --push    after syncing, push (and create) remote branch
EOF
  exit 1
}

get_branch_name() {
  git rev-parse --abbrev-ref HEAD 2>/dev/null \
    || error "⚠️  Not a git repo or cannot detect current branch."
}

detect_base() {
  [[ "${BRANCH%%/*}" == hotfix ]] && echo main || echo develop
}

validate_prefix() {
  [[ "${BRANCH}" =~ ^(feature|bugfix|hotfix)/.+$ ]] \
    || error "⚠️  Branch name must start with feature/, bugfix/ or hotfix/."
}

fetch_with_prune() {
  echo "→ [STEP 1/2] Fetch remote and prune"
  git fetch --prune origin
}

sync_rebase() {
  echo "→ [STEP 2/2] Rebase '${BRANCH}' onto 'origin/${BASE}' with auto-stash"
  if ! git rebase "origin/${BASE}" --autostash; then
    error "⚠️  Rebase failed. Resolve conflicts, and run 'git rebase --continue' or 'git rebase --abort'."
  fi
}

push_remote() {
  echo "→ [PUSH MODE] Ensure remote branch 'origin/${BRANCH}' exists"
  if git show-ref --verify --quiet "refs/remotes/origin/${BRANCH}"; then
    echo "↳ Remote exists → Push commits"
    git push origin "${BRANCH}" || error "⚠️  Push failed."
  else
    create_remote_branch
  fi
}

create_remote_branch() {
  echo "↳ Remote does not exists → Create remote branch 'origin/${BRANCH}' and push commits"
  git push -u origin "HEAD:${BRANCH}" \
    || error "⚠️  Failed to create remote branch."
}

main() {
  local do_push=false
  if [[ "${1-}" == "--push" ]]; then
    do_push=true
    shift
  fi

  BRANCH=$(get_branch_name)
  BASE=$(detect_base)
  echo "→ Starting sync for '${BRANCH}' against '${BASE}'"

  validate_prefix

  fetch_with_prune
  sync_rebase

  if $do_push; then
    push_remote
    echo "✔ Local branch '${BRANCH}' synced with '${BASE}' and pushed to 'origin/${BRANCH}'"
  else
    echo "✔ Local branch '${BRANCH}' synced with '${BASE}'"
  fi
}

main
