#!/usr/bin/env bash
#
# git-sync [--push] [<branch>]
# Sync your feature/* or bugfix/* with develop,
# or hotfix/* with main. Optionally push/create remote branch.

set -euo pipefail

error() { printf 'Error: %s\n' "$1" >&2; exit 1; }
usage() {
  cat <<EOF
Usage: $(basename "$0") [--push] [<branch>]
  --push      after syncing, push (and create) remote branch
  <branch>    branch to sync; defaults to current branch
EOF
  exit 1
}

get_branch_name() {
  if [ $# -gt 1 ]; then
    usage
  elif [ $# -eq 1 ]; then
    echo "$1"
  else
    git rev-parse --abbrev-ref HEAD 2>/dev/null \
      || error "Not a git repo or cannot detect current branch."
  fi
}

detect_base() {
  [[ "${BRANCH%%/*}" == hotfix ]] && echo main || echo develop
}

validate_prefix() {
  [[ "${BRANCH}" =~ ^(feature|bugfix|hotfix)/.+$ ]] \
    || error "Branch name must start with feature/, bugfix/ or hotfix/."
}

fetch_and_prune() {
  echo "→ [STEP 1/5] Fetch remote and prune"
  git fetch --prune origin
}

do_stash() {
  local MSG="git-sync auto-stash on $(date '+%Y-%m-%d %H:%M:%S')"
  echo "→ [STEP 2/5] Stash uncommitted changes: ${MSG}"

  local output
  output=$(git stash push --keep-index --include-untracked -m "${MSG}")
  if ! grep -q "No local changes to save" <<< "${output}"; then
    STASHED=true
    LAST_STASH_REF="stash@{0}"
  else
    STASHED=false
  fi
}

sync_branch() {
  echo "→ [STEP 3/5] Sync base '${BASE}'"
  git checkout "${BASE}"
  git pull --ff-only origin "${BASE}"
}

merge_base_into() {
  echo "→ [STEP 4/5] Merge '${BASE}' into '${BRANCH}'"
  git checkout "${BRANCH}"
  git merge --no-ff "${BASE}"
}

do_pop() {
  local trap="${1:-false}"

  if [[ "${STASHED:-false}" != "true" ]]; then
    [[ "$trap" != "true" ]] && echo "→ No auto-stash to restore."
    return
  fi

  if [[ "$trap" != "true" ]]; then
    echo "→ [STEP 5/5] Restore stash"
  else
    echo "⚠️  Error occurred in sync. Restore stash"
  fi

  git stash pop --index "${LAST_STASH_REF}" \
    || echo "⚠️  Could not pop ${LAST_STASH_REF}"
}

push_remote() {
  echo "→ [PUSH MODE] Check remote branch 'origin/${BRANCH}'"
  if git show-ref --verify --quiet "refs/remotes/origin/${BRANCH}"; then
    echo "→ [PUSH MODE] Push '${BRANCH}' to 'origin/${BRANCH}'"
    git push origin "${BRANCH}" || error "Push failed."
  else
    create_remote_branch
  fi
}

create_remote_branch() {
  echo "→ [PUSH MODE] Create remote branch 'origin/${BRANCH}' and push"
  git push -u origin "HEAD:${BRANCH}" \
    || error "Failed to create remote branch."
}

main() {
  BRANCH=$(get_branch_name "$@")
  BASE=$(detect_base "${BRANCH}")
  echo "→ Starting sync for '${BRANCH}' against '${BASE}'"

  local do_push=false
  if [[ "${BRANCH}" == "--push" ]]; then
    do_push=true
    shift
  fi

  validate_prefix
  fetch_and_prune
  do_stash

  trap 'do_pop true; exit 1' ERR INT
  sync_branch
  merge_base_into
  trap - ERR INT

  do_pop

  if $do_push; then
    push_remote
    echo "✔ Local branch '${BRANCH}' synced with '${BASE}' and pushed to 'origin/${BRANCH}'"
  else
    echo "✔ Local branch '${BRANCH}' synced with '${BASE}'"
  fi
}

main "$@"
