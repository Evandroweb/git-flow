#!/usr/bin/env bash
#
# git-sync [<branch>]
# Sync your feature/* or bugfix/* with develop,
# or hotfix/* with main.
#

set -euo pipefail

error() {
  printf 'Error: %s\n' "$1" >&2
  exit 1
}

usage() {
  cat <<EOF
Usage: $(basename "$0") [<branch>]
  If no <branch> given, uses the current branch.
  Branch must start with feature/, bugfix/ or hotfix/.
EOF
  exit 1
}

get_branch_name() {
  if [ $# -gt 1 ]; then
    usage
  elif [ $# -eq 1 ]; then
    echo "$1"
  else
    git rev-parse --abbrev-ref HEAD 2>/dev/null \
      || error "Not a git repo or cannot detect current branch."
  fi
}

detect_base() {
  [[ "${1%%/*}" == hotfix ]] && echo main || echo develop
}

validate_prefix() {
  [[ "$1" =~ ^(feature|bugfix|hotfix)/.+$ ]] \
    || error "Branch name must start with feature/, bugfix/ or hotfix/."
}

fetch_and_prune() {
  echo "→ [STEP 1/5] Fetch remote and prune"
  git fetch --prune origin
}

 do_stash() {
  local MSG="git-sync auto-stash on $(date '+%Y-%m-%d %H:%M:%S')"
  echo "→ [STEP 2/5] Stash uncommitted changes: ${MSG}"

  local output
  output=$(git stash push --keep-index --include-untracked -m "${MSG}")

  if ! grep -q "No local changes to save" <<< "$output"; then
    STASHED=true
    LAST_STASH_REF="stash@{0}"
  else
    STASHED=false
  fi
}

sync_branch() {
  echo "→ [STEP 3/5] Sync base '$(detect_base "$1")'"
  git checkout "$(detect_base "$1")"
  git pull --ff-only origin "$(detect_base "$1")"
}

merge_base_into() {
  echo "→ [STEP 4/5] Merge into '$1'"
  git checkout "$2"
  git merge --no-ff "$1"
}

do_pop() {
  local trap="${1:-false}"

  if [[ "${STASHED:-false}" != "true" ]]; then
    [[ "$trap" != "true" ]] && echo "→ No auto-stash to restore."
    return
  fi

  if [[ "$trap" != "true" ]]; then
    echo "→ [STEP 5/5] Restore stash"
  else
    echo "⚠️  Error occurred in sync. Restoring stash…"
  fi

  git stash pop --index "${LAST_STASH_REF}" \
    || echo "⚠️  Could not pop ${LAST_STASH_REF}"
}

push_remote() {
  echo "→ [PUSH MODE] Ensuring remote branch origin/$1"

  if git show-ref --verify --quiet "refs/remotes/origin/$1"; then
    echo "→ Remote exists → pushing commits"
    git push origin "$1" || error "Push failed."
  else
    echo "→ Remote not found → creating branch and pushing HEAD"
    git push -u origin "HEAD:$1" || error "Creating remote branch failed."
  fi
}

main() {
  local branch
  branch=$(get_branch_name "$@")
  echo "→ Starting sync for branch '${branch}'"

  local do_push=false
  if [[ "$1" == "--push" ]]; then
    do_push=true
    shift
  fi

  validate_prefix "$branch"
  fetch_and_prune
  do_stash

  trap 'do_pop true; exit 1' ERR INT
  sync_branch "$(detect_base "$branch")"
  merge_base_into "$(detect_base "$branch")" "$branch"
  trap - ERR

  do_pop

  if $do_push; then
    push_remote "$branch"
  fi

  echo "✔ Branch '${branch}' synced${do_push:+ and pushed} with '${base}'"
}

main "$@"
